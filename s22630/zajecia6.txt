Klient:

#include <stdio.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>


int main(int argc, char *argv[]) {

  struct hostent *server;
  struct sockaddr_in serv_addr, cli_addr;
  int sockfd, portno, n;
  char buffer[256];

  if (argc < 3) {
    fprintf(stderr, "Usage %s hostname port\n", argv[0]);
    exit(0);
  }

  portno = atoi(argv[2]);
  sockfd = socket(AF_INET, SOCK_STREAM, 0);

  if (sockfd < 0) {
    perror("error opening socket");
	exit(1)
  }

  server == gethostbyname(argv[1]);

  if (server == NULL) {
    fprintf(stderr, "error no such Host\n");
    exit(0);
  }

  bzero((char * ) & serv_addr, sizeof(serv_addr));
  serv_addr.sin_family = AF_INET;

  bcopy((char * ) server -> h_addr,
    (char * ) & serv_addr.sin_addr.s_addr,
    server -> h_length);

  serv_addr.sin_port = htons(portno);

  if (connect(sockfd, (struct sockaddr * ) & serv_addr, sizeof(serv_addr)) < 0) {
    perror("ERROR connecting");
	exit(1)
  }

  printf("please enter the message");
  bzero(buffer, 256);
  fgets(buffer, 255, stdin);

  n = write(sockfd, buffer, strlen(buffer));

  if (n < 0) {
    perror("ERROR writing to socket");
	exit(1)
  }

  bzero(buffer, 256);
  n = read(sockfd, buffer, 255);

  if (n < 0) {
    perror("ERROR reading from socket");
	exit(1)
  }

  printf("%s\n", buffer);

  return 0;
}


Serwer:

#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <sys/types.h>


int main(int argc, char * argv[]) {

	int sockfd, newsockfd, portno, clilen, n;
	struct sockaddr_in serv_addr, cli_addr;
	char buffer[256];

	if (argc < 2) {
		fprintf(stderr, "Error no port\n");
		exit(1);
	}

	sockfd = socket(AF_INET, SOCK_STREAM, 0);

	if (sockfd < 0) {
		perror("Error opening the socket");
		exit(1);
	}

	bzero((char * ) & serv_addr, sizeof(serv_addr));
	portno = atoi(argv[1]);
	
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = INADDR_ANY;
	serv_addr.sin_port = htons(portno);

	if (bind(sockfd, (struct sockaddr * ) & serv_addr, sizeof(serv_addr)) < 0) {
		perror("Error on binding");
		exit(1);
	}

	listen(sockfd, 5);
	clilen = sizeof(cli_addr);
	newsockfd = accept(sockfd, (struct sockaddr * ) & cli_addr, & clilen);

	if (newsockfd < 0) {
		perror("Error on accept");
		exit(1);
	}

	bzero(buffer, 256);
	n = read(newsockfd, buffer, 255);

	if (n < 0) {
		perror("Error on reading from socket");
		exit(1);
	}

	printf("Message %s\n", buffer);
	n = write(newsockfd, "Received your message", 18);

	if (n < 0) {
		perror("Error on writing to socket");
		exit(1);
	}

	return 0;
}
